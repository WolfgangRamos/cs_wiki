#+TITLE: Semaphoren
#+STARTUP: content
#+STARTUP: latexpreview
#+STARTUP: inlineimages
#+OPTIONS: toc:nil
#+HTML_MATHJAX: align: left indent: 5em tagside: left
#+BEGIN_HTML
---
layout: page
title: Semaphoren
---
#+END_HTML

Ein *Semaphor* (auch /Counting Semaphore/ oder /General Semaphore/)
besteht aus

- einem Integer Wert und
- einer Queue mit wartenden (blockierten) Prozessen/Threads

Ein Semaphor stellt zwei [[./atomic_operations.org][atomare
Operationen]] zur Verfügung:

- =wait(⟨semaphore⟩)= bzw. =p(⟨semaphore⟩)=:
  - Wert dekrementieren
  - ggf. aufrufenden Prozess blockieren und hinten in die Queue einreihen (wenn
    Wert der Semaphre < 0 ist)
- =signal(⟨semaphore⟩)= bzw. =v(⟨semaphore⟩)=:
  - Wert inkrementieren und
  - ggf. den ersten wartenden Prozess aus der Queue in den Ready
    Zustand versetzen (wenn der Wert der Semaphore <= 0 ist) und den
    Prozess aus der Queue entfernen

#+CAPTION: wait() bzw. p() Operation einer Semaphore in Pseudocode
#+BEGIN_SRC
wait() {
  s.value--;
  if(s.value < 0) {
    tail(s.queue) = p;
    block(p);
}
#+END_SRC

#+BEGIN_SRC
signal() {
  s.value++;
  if(s.value <= 0) {
    ready(head(s.queue));
    deletehead(s.queue);
}
#+END_SRC

#+CAPTION: Mutual Exclusion mit Semaphoren
#+BEGIN_SRC
    wait(⟨semaphore⟩);
    ⟨Critical Section⟩
    signal(⟨semaphore⟩);
#+END_SRC

** Nachteile von Semaphoren

- =p()= und =v()= müssen explizit aufgerufen werden. Wenn ein Aufruf
  vergessen wird können Fehler auftreten.
- kein *reentry*: Man muss immer sicherstellen, dass zur Laufzeit
  nicht zweimal hintereinander (z.B. in unterschiedlichen Methoden)
  =p()= aufgerufen wird
- syntaktisch unschön: atomare Blöcke im Code schwer zu
  identifizieren; der code wird schnell unübersichtlich

* Binäre Semaphoren

Eine *binäre Semaphore* (engl. /binary semaphore/) kann nur die Werte
=0= und =1= annehmen. Eine binärere Semaphore wird häufig auch als
/Mutex/ (kurz für mutual exclusion) bezeichnet, da damit
wechselseitger Ausschluss von Prozessen beim Zugriff auf Ressourcen
realisierbar ist.


