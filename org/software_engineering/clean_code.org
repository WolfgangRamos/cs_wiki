#+TITLE: Clean Code
#+bibliography: ../bibliography/bibliography.bib

* Principles

** Encapsulation
:PROPERTIES:
:CUSTOM_ID: encapsulation
:END:

- encapsulation is about protecting data integrity
- low integrity increases the complexity of code (invariants have to
  be checked over and over)
- maintaining data integrity is the responsibility of the domain
  classes

** Information Hiding

- The goal of information hiding is the same as the one of
  encapsulation: Implementation details of a component should be
  hidden from clients, so that no client can corrupt the data
  integrity of the software entity.

** Open-Closed Principle

- /software entities (classes, modules, functions, etc.) should be open
  for extension, but closed for modification./
- Open for extension: It should be possible to extend the behavior of
  the software entity without changing anything on the entity
  itself. Examples:
  - overridable methods in OOP languages provide extension
    points: sub-classes can extend the behavior of the super-class
    (see also Liskov substitution principle)
  - interfaces provide extension points: new implementations can
    provide new (extended) behavior
- Closed for modification: The only way for corrupting/changing the
  behavior of a software entity should be changing the entity
  implementation (this is the same goal as encapsulation). Examples:
  - interfaces are closed
  - classes in compiled libraries are closed

** Cohesion and Coupling

- /Cohesion/: The degree of how much the elements (e.g. the members of a
  class) of /a single component/ (e.g. a class, an assembly) are
  interconnected (i.e. using each other)
- /Coupling/: The degree of direct knowledge that one component has of
  another. Coupling of one component /A/ to another component /B/ is low
  when
  - /B/ is well encapsulated (i.e. /B/ hides its internals so that /A/ has
    no knowledge of them)
  - the implementation of /B/ can be changed without changing the
    implementation of /A/ (this can e.g. be achieved when /A/ only holds a
    reference to an interface that /B/ implements).

*** Interfaces and Coupling

- Interfaces reduce coupling, but
  - you should only use interfaces when you really need
    substitutability [cite:@fowler-role-interface]
  - interfaces are not abstractions per se:
    https://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/

* Implementation details vs. Observable behavior

** 
